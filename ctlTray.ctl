VERSION 5.00
Begin VB.UserControl ctlTray 
   BackColor       =   &H00800000&
   ClientHeight    =   240
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   240
   InvisibleAtRuntime=   -1  'True
   ScaleHeight     =   240
   ScaleWidth      =   240
   Begin VB.PictureBox picArea 
      Height          =   495
      Left            =   0
      ScaleHeight     =   435
      ScaleWidth      =   435
      TabIndex        =   0
      Top             =   0
      Width           =   495
   End
End
Attribute VB_Name = "ctlTray"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

Private Type NOTIFYICONDATA
   cbSize As Long
   hWnd As Long
   uId As Long
   uFlags As Long
   uCallbackMessage As Long
   hIcon As Long
   szTip As String * 64
End Type

'Declare the constants for the API function. These constants can be
'found in the header file Shellapi.h.

'The following constants are the messages sent to the
'Shell_NotifyIcon function to add, modify, or delete an icon from the
'taskbar status area.
Private Const NIM_ADD = &H0
Private Const NIM_MODIFY = &H1
Private Const NIM_DELETE = &H2

'The following constant is the message sent when a mouse event occurs
'within the rectangular boundaries of the icon in the taskbar status
'area.
Private Const WM_MOUSEMOVE = &H200

'The following constants are the flags that indicate the valid
'members of the NOTIFYICONDATA data type.
Const NIF_ICON = &H2
Const NIF_MESSAGE = &H1
Const NIF_TIP = &H4
Const NIF_STATE = &H8
Const NIF_INFO = &H10
Const NIS_HIDDEN = &H1
Const NIS_SHAREDICON = &H2
Const NOTIFYICON_VERSION = &H1
Const NIIF_WARNING = &H30
Const NIIF_ERROR = &H10
Const NIIF_INFO = &H40

'The following constants are used to determine the mouse input on the
'the icon in the taskbar status area.

'Left-click constants.
Private Const WM_LBUTTONDBLCLK = &H203   'Double-click
Private Const WM_LBUTTONDOWN = &H201     'Button down
Private Const WM_LBUTTONUP = &H202       'Button up

'Right-click constants.
Private Const WM_RBUTTONDBLCLK = &H206   'Double-click
Private Const WM_RBUTTONDOWN = &H204     'Button down
Private Const WM_RBUTTONUP = &H205       'Button up

'Declare the API function call.
Private Declare Function Shell_NotifyIcon Lib "shell32" Alias "Shell_NotifyIconA" (ByVal dwMessage As Long, pnid As NOTIFYICONDATA) As Boolean
Private Declare Function LoadImage Lib "user32" Alias "LoadImageA" (ByVal hInst As Long, ByVal lpsz As Any, ByVal un1 As Long, ByVal n1 As Long, ByVal n2 As Long, ByVal un2 As Long) As Long

'api functions to facilitate the proper display of the tray icon
Private Declare Function SetForegroundWindow Lib "user32" (ByVal hWnd As Long) As Long
Private Declare Function GetParent Lib "user32" (ByVal hWnd As Long) As Long
Private Declare Function DestroyIcon Lib "user32" (ByVal hIcon As Long) As Long

'events generated by the control.
Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
Event Click(Button As Integer, Shift As Integer, X As Single, Y As Single)
Event DblClick(Button As Integer, Shift As Integer, X As Single, Y As Single)
Event MouseMove(X As Single, Y As Single)

'Property Variables:
Private m_strTip As String
Private m_newHIcon As Long
Private m_udtNID As NOTIFYICONDATA
Public m_strIcon As String

Private Sub DetectMouseMovement_Proprietary(Button As Integer, Shift As Integer, X As Single, Y As Single)
    'Event occurs when the mouse pointer is within the rectangular
    'boundaries of the icon in the taskbar status area.
    
    Dim Msg As Long
    Dim sFilter As String
    Const LEFT_BUTTON = 1
    Const RIGHT_BUTTON = 2
    
    'figure the message type
    Msg = X / Screen.TwipsPerPixelX
    
    Select Case Msg
        Case WM_LBUTTONDBLCLK
            SetForegroundWindow GetParent(hWnd)
            RaiseEvent DblClick(LEFT_BUTTON, Shift, X, Y)
        Case WM_RBUTTONUP
            SetForegroundWindow GetParent(hWnd)
            RaiseEvent Click(RIGHT_BUTTON, Shift, X, Y)
    End Select
End Sub

Public Sub Remove()
    Shell_NotifyIcon NIM_DELETE, m_udtNID
    If m_newHIcon > 0 Then DestroyIcon m_newHIcon
End Sub

Public Sub doTray(strToolTip As String)
    m_strTip = Trim(strToolTip)
    
    If m_newHIcon = 0 Then
        m_newHIcon = LoadImage(0, m_strIcon & vbNullChar, 1, 16, 16, 16)
    End If
    
    With m_udtNID
        .cbSize = Len(m_udtNID)
        .hWnd = picArea.hWnd
        .uId = 666
        .uFlags = NIF_ICON Or NIF_TIP Or NIF_MESSAGE
        .uCallbackMessage = WM_MOUSEMOVE
        .szTip = m_strTip & vbNullChar
        If m_newHIcon > 0 Then .hIcon = m_newHIcon
    End With
    
    If Not Shell_NotifyIcon(NIM_MODIFY, m_udtNID) Then
        Shell_NotifyIcon NIM_ADD, m_udtNID
    End If
End Sub

Private Sub picArea_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
    DetectMouseMovement_Proprietary Button, Shift, X, Y
End Sub

Private Sub UserControl_Terminate()
    Remove
End Sub
